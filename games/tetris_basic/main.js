/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/games/tetris_basic/consts.ts":
/*!******************************************!*\
  !*** ./src/games/tetris_basic/consts.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BACK_COLOR: () => (/* binding */ BACK_COLOR),\n/* harmony export */   BLOCKS_MASTER: () => (/* binding */ BLOCKS_MASTER),\n/* harmony export */   BLOCK_COLOR: () => (/* binding */ BLOCK_COLOR),\n/* harmony export */   BLOCK_COLS: () => (/* binding */ BLOCK_COLS),\n/* harmony export */   BLOCK_RAWS: () => (/* binding */ BLOCK_RAWS),\n/* harmony export */   BLOCK_SIZE: () => (/* binding */ BLOCK_SIZE),\n/* harmony export */   EFFECT_COLOR1: () => (/* binding */ EFFECT_COLOR1),\n/* harmony export */   EFFECT_COLOR2: () => (/* binding */ EFFECT_COLOR2),\n/* harmony export */   EFFECT_CYCLE: () => (/* binding */ EFFECT_CYCLE),\n/* harmony export */   ERROR_COLOR: () => (/* binding */ ERROR_COLOR),\n/* harmony export */   GAMEOVER_COLOR: () => (/* binding */ GAMEOVER_COLOR),\n/* harmony export */   LOCK_COLOR: () => (/* binding */ LOCK_COLOR),\n/* harmony export */   NEXTLEVEL: () => (/* binding */ NEXTLEVEL),\n/* harmony export */   SCREEN_HEIGHT: () => (/* binding */ SCREEN_HEIGHT),\n/* harmony export */   SCREEN_WIDTH: () => (/* binding */ SCREEN_WIDTH),\n/* harmony export */   STAGE_MASTER: () => (/* binding */ STAGE_MASTER),\n/* harmony export */   TEXT_COLOR: () => (/* binding */ TEXT_COLOR),\n/* harmony export */   WALL_COLOR: () => (/* binding */ WALL_COLOR)\n/* harmony export */ });\nvar BLOCK_SIZE = 24;\nvar BLOCK_RAWS = 22;\nvar BLOCK_COLS = 12;\nvar SCREEN_WIDTH = BLOCK_SIZE * BLOCK_COLS;\nvar SCREEN_HEIGHT = BLOCK_SIZE * BLOCK_RAWS;\nvar EFFECT_CYCLE = 2; // ticks\nvar BACK_COLOR = \"#fffffe\";\nvar TEXT_COLOR = \"#222222\";\nvar GAMEOVER_COLOR = \"palevioletred\";\nvar BLOCK_COLOR = \"#3da9fc\";\nvar LOCK_COLOR = \"#90b4ce\";\nvar WALL_COLOR = \"#094067\";\nvar ERROR_COLOR = \"tomato\";\nvar EFFECT_COLOR1 = \"#eeeeee\";\nvar EFFECT_COLOR2 = LOCK_COLOR;\nvar NEXTLEVEL = 10;\nvar BLOCKS_MASTER = [\n    {\n        name: 'T',\n        pattern: [\n            [0, 0, 0, 0],\n            [0, 1, 0, 0],\n            [1, 1, 1, 0],\n            [0, 0, 0, 0]\n        ]\n    },\n    {\n        name: 'S',\n        pattern: [\n            [0, 0, 0, 0],\n            [0, 1, 1, 0],\n            [1, 1, 0, 0],\n            [0, 0, 0, 0]\n        ]\n    },\n    {\n        name: 'I',\n        pattern: [\n            [0, 1, 0, 0],\n            [0, 1, 0, 0],\n            [0, 1, 0, 0],\n            [0, 1, 0, 0]\n        ]\n    },\n    {\n        name: 'Z',\n        pattern: [\n            [0, 0, 0, 0],\n            [1, 1, 0, 0],\n            [0, 1, 1, 0],\n            [0, 0, 0, 0]\n        ]\n    },\n    {\n        name: 'J',\n        pattern: [\n            [0, 1, 0, 0],\n            [0, 1, 0, 0],\n            [1, 1, 0, 0],\n            [0, 0, 0, 0]\n        ]\n    },\n    {\n        name: 'L',\n        pattern: [\n            [0, 1, 0, 0],\n            [0, 1, 0, 0],\n            [1, 1, 0, 0],\n            [0, 0, 0, 0]\n        ]\n    },\n    {\n        name: 'O',\n        pattern: [\n            [0, 0, 0, 0],\n            [0, 1, 1, 0],\n            [0, 1, 1, 0],\n            [0, 0, 0, 0]\n        ]\n    }\n];\nvar STAGE_MASTER = [\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9],\n    [9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9],\n    [9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9],\n    [9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9],\n    [9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9],\n    [9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9],\n    [9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9],\n    [9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9],\n    [9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9],\n    [9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9],\n    [9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9],\n    [9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9],\n    [9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9],\n    [9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9],\n    [9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9],\n    [9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9],\n    [9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9],\n    [9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9],\n    [9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9],\n    [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n];\n\n\n//# sourceURL=webpack://my-canvas-games-sandbox/./src/games/tetris_basic/consts.ts?");

/***/ }),

/***/ "./src/games/tetris_basic/gameController.ts":
/*!**************************************************!*\
  !*** ./src/games/tetris_basic/gameController.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GameController: () => (/* binding */ GameController)\n/* harmony export */ });\n/* harmony import */ var _consts__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./consts */ \"./src/games/tetris_basic/consts.ts\");\n\nvar GameMode = {\n    Opening: 0,\n    Playing: 1,\n    GameOver: 2,\n    Effect: 3,\n};\nvar PlayingMode = {\n    Playing: 0,\n    ClearBlock: 1\n};\nvar BlockState = {\n    Empty: 0,\n    Movable: 1,\n    Locked: 2,\n    Clear: 3,\n    Wall: 9\n};\nvar GameController = /** @class */ (function () {\n    function GameController() {\n        this.canvas = null;\n        this.ctx = null;\n        this.gameMode = GameMode.Opening;\n        this.playingMode = PlayingMode.Playing;\n        this.currentStage = [];\n        this.currentBlockX = 0;\n        this.currentBlockY = 0;\n        this.currentBlock = null;\n        this.intervalByMiliSeconds = 1000;\n        this.currentDelta = 0.0;\n        this.prevTimestamp = 0.0;\n        this.elapsedMiliSeconds = 0.0;\n        this.lastElapsedMiliSecondsForOpening = 0.0;\n        this.lastElapsedMiliSecondsForPlaying = 0.0;\n        this.lastElapsedMiliSecondsForGameover = 0.0;\n        this.openingTextDisplay = true;\n        this.gameoverTextDisplay = true;\n        this.currentEffectBlinking = true;\n        this.animationCount = 0;\n    }\n    GameController.getInstance = function () {\n        if (GameController.instance == null) {\n            GameController.instance = new GameController();\n        }\n        return GameController.instance;\n    };\n    GameController.prototype.init = function (canvas) {\n        var _a;\n        this.canvas = canvas;\n        this.canvas.width = _consts__WEBPACK_IMPORTED_MODULE_0__.SCREEN_WIDTH;\n        this.canvas.height = _consts__WEBPACK_IMPORTED_MODULE_0__.SCREEN_HEIGHT;\n        this.ctx = (_a = this.canvas) === null || _a === void 0 ? void 0 : _a.getContext(\"2d\");\n        this.initStage();\n        this.gameMode = GameMode.Opening;\n        this.intervalByMiliSeconds = 1000;\n    };\n    GameController.prototype.initStage = function () {\n        this.currentBlock = null;\n        for (var i = 0; i < _consts__WEBPACK_IMPORTED_MODULE_0__.BLOCK_RAWS; i++) {\n            for (var j = 0; j < _consts__WEBPACK_IMPORTED_MODULE_0__.BLOCK_COLS; j++) {\n                if (this.currentStage[i] == null) {\n                    this.currentStage[i] = [];\n                }\n                this.currentStage[i][j] = _consts__WEBPACK_IMPORTED_MODULE_0__.STAGE_MASTER[i][j];\n            }\n        }\n    };\n    GameController.prototype.reset = function () {\n        if (this.canvas == null) {\n            return;\n        }\n        this.init(this.canvas);\n    };\n    GameController.prototype.drawScene = function (timestamp) {\n        var now = timestamp;\n        if (this.prevTimestamp === 0) {\n            this.prevTimestamp = now;\n            return;\n        }\n        this.currentDelta = now - this.prevTimestamp;\n        this.prevTimestamp = now;\n        this.elapsedMiliSeconds += this.currentDelta;\n        switch (this.gameMode) {\n            case GameMode.Opening:\n                this.drawOpeningScene();\n                break;\n            case GameMode.Playing:\n                this.drawPlayingScene();\n                break;\n            case GameMode.GameOver:\n                this.drawGameOverScene();\n                break;\n        }\n    };\n    GameController.prototype.drawOpeningScene = function () {\n        if (this.canvas == null || this.ctx == null) {\n            return;\n        }\n        if (this.lastElapsedMiliSecondsForOpening === 0.0) {\n            this.lastElapsedMiliSecondsForOpening = this.elapsedMiliSeconds;\n            return;\n        }\n        if ((this.elapsedMiliSeconds - this.lastElapsedMiliSecondsForOpening) > 1000) {\n            this.openingTextDisplay = !this.openingTextDisplay;\n            this.lastElapsedMiliSecondsForOpening = this.elapsedMiliSeconds;\n        }\n        this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n        if (this.openingTextDisplay) {\n            var message_1 = \"Tetris Basic\";\n            this.ctx.font = '28px sans-serif';\n            this.ctx.fillStyle = _consts__WEBPACK_IMPORTED_MODULE_0__.TEXT_COLOR;\n            var measure = this.ctx.measureText(message_1);\n            var centerX = (this.canvas.width - measure.width) / 2;\n            var centerY = (this.canvas.height - (measure.actualBoundingBoxAscent + measure.actualBoundingBoxDescent)) / 2;\n            this.ctx.fillText(message_1, centerX, centerY);\n            var body = \"Press 'Enter' to start\";\n            this.ctx.font = '14px sans-serif';\n            this.ctx.fillStyle = _consts__WEBPACK_IMPORTED_MODULE_0__.TEXT_COLOR;\n            var measureBody = this.ctx.measureText(body);\n            var centerBodyX = (this.canvas.width - measureBody.width) / 2;\n            var bodyHeight = (measure.actualBoundingBoxAscent + measure.actualBoundingBoxDescent);\n            this.ctx.fillText(body, centerBodyX, centerY + bodyHeight);\n        }\n    };\n    GameController.prototype.drawPlayingScene = function () {\n        this.clearCanvas();\n        if (this.playingMode === PlayingMode.Playing) {\n            if (this.currentBlock == null) {\n                this.pickCurrentBlock();\n            }\n            var prevCurrentBlockX = this.currentBlockX;\n            var prevCurrentBlockY = this.currentBlockY;\n            if ((this.elapsedMiliSeconds - this.lastElapsedMiliSecondsForPlaying) > this.intervalByMiliSeconds) {\n                this.lastElapsedMiliSecondsForPlaying = this.elapsedMiliSeconds;\n                this.currentBlockY++;\n            }\n            if (this.checkColision()) {\n                this.currentBlockX = prevCurrentBlockX;\n                this.currentBlockY = prevCurrentBlockY;\n                this.lockCurrentBlock();\n            }\n            this.clearCurrentBlockFromStage();\n            this.drawCurrentBlockToStage();\n            this.drawStage();\n            if (this.checkLine()) {\n                this.playingMode = PlayingMode.ClearBlock;\n            }\n            if (this.checkGameOver()) {\n                this.gameMode = GameMode.GameOver;\n            }\n        }\n        else if (this.playingMode === PlayingMode.ClearBlock) {\n            if ((this.elapsedMiliSeconds - this.lastElapsedMiliSecondsForPlaying) > 250) {\n                this.currentEffectBlinking = !this.currentEffectBlinking;\n                this.lastElapsedMiliSecondsForPlaying = this.elapsedMiliSeconds;\n                this.animationCount++;\n            }\n            if (this.animationCount > 4) {\n                this.animationCount = 0;\n                this.deleteLine();\n                this.playingMode = PlayingMode.Playing;\n            }\n            this.clearCurrentBlockFromStage();\n            this.drawCurrentBlockToStage();\n            this.drawStage();\n        }\n    };\n    GameController.prototype.checkColision = function () {\n        if (this.currentBlock == null) {\n            return 0;\n        }\n        for (var i = 0; i < 4; i++) {\n            for (var j = 0; j < 4; j++) {\n                if (this.currentStage[i + this.currentBlockY][j + this.currentBlockX] > 1 && this.currentBlock.pattern[i][j]) {\n                    return 1;\n                }\n            }\n        }\n        return 0;\n    };\n    GameController.prototype.pickCurrentBlock = function () {\n        this.currentBlockX = Math.floor(_consts__WEBPACK_IMPORTED_MODULE_0__.BLOCK_COLS / 3);\n        this.currentBlockY = 0;\n        var blockTypeIndex = Math.floor(Math.random() * _consts__WEBPACK_IMPORTED_MODULE_0__.BLOCKS_MASTER.length);\n        this.currentBlock = {\n            name: '',\n            pattern: []\n        };\n        for (var i = 0; i < 4; i++) {\n            for (var j = 0; j < 4; j++) {\n                this.currentBlock.name = _consts__WEBPACK_IMPORTED_MODULE_0__.BLOCKS_MASTER[blockTypeIndex].name;\n                this.currentBlock.pattern = structuredClone(_consts__WEBPACK_IMPORTED_MODULE_0__.BLOCKS_MASTER[blockTypeIndex].pattern);\n            }\n        }\n    };\n    GameController.prototype.lockCurrentBlock = function () {\n        if (this.currentBlock == null) {\n            return;\n        }\n        for (var i = 0; i < 4; i++) {\n            for (var j = 0; j < 4; j++) {\n                if (this.currentBlock.pattern[i][j]) {\n                    this.currentStage[i + this.currentBlockY][j + this.currentBlockX] = 2;\n                }\n            }\n        }\n        this.currentBlock = null;\n    };\n    GameController.prototype.clearCanvas = function () {\n        if (this.canvas == null || this.ctx == null) {\n            return;\n        }\n        this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n    };\n    GameController.prototype.clearCurrentBlockFromStage = function () {\n        for (var i = 0; i < _consts__WEBPACK_IMPORTED_MODULE_0__.BLOCK_RAWS; i++) {\n            for (var j = 0; j < _consts__WEBPACK_IMPORTED_MODULE_0__.BLOCK_COLS; j++) {\n                if (this.currentStage[i][j] === 1) {\n                    this.currentStage[i][j] = 0;\n                }\n            }\n        }\n    };\n    GameController.prototype.drawStage = function () {\n        if (this.canvas == null || this.ctx == null) {\n            return;\n        }\n        for (var i = 0; i < _consts__WEBPACK_IMPORTED_MODULE_0__.BLOCK_RAWS; i++) {\n            for (var j = 0; j < _consts__WEBPACK_IMPORTED_MODULE_0__.BLOCK_COLS; j++) {\n                switch (this.currentStage[i][j]) {\n                    case BlockState.Empty:\n                        this.ctx.fillStyle = _consts__WEBPACK_IMPORTED_MODULE_0__.BACK_COLOR;\n                        break;\n                    case BlockState.Movable:\n                        this.ctx.fillStyle = _consts__WEBPACK_IMPORTED_MODULE_0__.BLOCK_COLOR;\n                        break;\n                    case BlockState.Locked:\n                        this.ctx.fillStyle = _consts__WEBPACK_IMPORTED_MODULE_0__.LOCK_COLOR;\n                        break;\n                    case BlockState.Clear:\n                        if (this.currentEffectBlinking) {\n                            this.ctx.fillStyle = _consts__WEBPACK_IMPORTED_MODULE_0__.EFFECT_COLOR1;\n                        }\n                        else {\n                            this.ctx.fillStyle = _consts__WEBPACK_IMPORTED_MODULE_0__.EFFECT_COLOR2;\n                        }\n                        break;\n                    case BlockState.Wall:\n                        this.ctx.fillStyle = _consts__WEBPACK_IMPORTED_MODULE_0__.WALL_COLOR;\n                        break;\n                }\n                this.ctx.fillRect(j * _consts__WEBPACK_IMPORTED_MODULE_0__.BLOCK_SIZE, i * _consts__WEBPACK_IMPORTED_MODULE_0__.BLOCK_SIZE, _consts__WEBPACK_IMPORTED_MODULE_0__.BLOCK_SIZE - 1, _consts__WEBPACK_IMPORTED_MODULE_0__.BLOCK_SIZE - 1);\n            }\n        }\n    };\n    GameController.prototype.drawGameOverScene = function () {\n        if (this.canvas == null || this.ctx == null) {\n            return;\n        }\n        if (this.lastElapsedMiliSecondsForGameover === 0.0) {\n            this.lastElapsedMiliSecondsForGameover = this.elapsedMiliSeconds;\n            return;\n        }\n        if ((this.elapsedMiliSeconds - this.lastElapsedMiliSecondsForGameover) > 1000) {\n            this.gameoverTextDisplay = !this.gameoverTextDisplay;\n            this.lastElapsedMiliSecondsForGameover = this.elapsedMiliSeconds;\n        }\n        this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n        if (this.gameoverTextDisplay) {\n            var message_2 = \"Game Over\";\n            this.ctx.font = '28px sans-serif';\n            this.ctx.fillStyle = _consts__WEBPACK_IMPORTED_MODULE_0__.TEXT_COLOR;\n            var measure = this.ctx.measureText(message_2);\n            var centerX = (this.canvas.width - measure.width) / 2;\n            var centerY = (this.canvas.height - (measure.actualBoundingBoxAscent + measure.actualBoundingBoxDescent)) / 2;\n            this.ctx.fillText(message_2, centerX, centerY);\n            var body = \"Press 'Enter' to contine\";\n            this.ctx.font = '14px sans-serif';\n            this.ctx.fillStyle = _consts__WEBPACK_IMPORTED_MODULE_0__.TEXT_COLOR;\n            var bodyHeight = (measure.actualBoundingBoxAscent + measure.actualBoundingBoxDescent);\n            this.ctx.fillText(body, centerX, centerY + bodyHeight);\n        }\n    };\n    GameController.prototype.GoPlayingScene = function () {\n        this.gameMode = GameMode.Playing;\n    };\n    GameController.prototype.RotateBlock = function () {\n        if (this.currentBlock == null) {\n            return;\n        }\n        var tmpBlock = { name: '', pattern: [] };\n        tmpBlock.pattern = structuredClone(this.currentBlock.pattern);\n        for (var i = 0; i < 4; i++) {\n            for (var j = 0; j < 4; j++) {\n                this.currentBlock.pattern[i][j] = tmpBlock.pattern[3 - j][i];\n            }\n        }\n        if (this.checkColision()) {\n            for (var i = 0; i < 4; i++) {\n                for (var j = 0; j < 4; j++) {\n                    this.currentBlock.pattern[i][j] = tmpBlock.pattern[i][j];\n                }\n            }\n        }\n    };\n    GameController.prototype.MoveBlockLeft = function () {\n        var prevCurrentBlockX = this.currentBlockX;\n        this.currentBlockX--;\n        if (this.checkColision()) {\n            this.currentBlockX = prevCurrentBlockX;\n        }\n    };\n    GameController.prototype.MoveBlockRight = function () {\n        var prevCurrentBlockX = this.currentBlockX;\n        this.currentBlockX++;\n        if (this.checkColision()) {\n            this.currentBlockX = prevCurrentBlockX;\n        }\n    };\n    GameController.prototype.MoveBlockDown = function () {\n        var prevCurrentBlockY = this.currentBlockY;\n        this.currentBlockY++;\n        if (this.checkColision()) {\n            this.currentBlockY = prevCurrentBlockY;\n            this.lockCurrentBlock();\n        }\n    };\n    GameController.prototype.isOpening = function () {\n        return this.gameMode === GameMode.Opening;\n    };\n    GameController.prototype.isPlaying = function () {\n        return this.gameMode === GameMode.Playing;\n    };\n    GameController.prototype.isGameover = function () {\n        return this.gameMode === GameMode.GameOver;\n    };\n    GameController.prototype.isClearBlock = function () {\n        return this.playingMode == PlayingMode.ClearBlock;\n    };\n    GameController.prototype.drawCurrentBlockToStage = function () {\n        if (this.currentBlock == null) {\n            return;\n        }\n        for (var i = 0; i < 4; i++) {\n            for (var j = 0; j < 4; j++) {\n                if (this.currentBlock.pattern[i][j]) {\n                    this.currentStage[i + this.currentBlockY][j + this.currentBlockX] = this.currentBlock.pattern[i][j];\n                }\n            }\n        }\n    };\n    GameController.prototype.checkLine = function () {\n        var detectClearLine = false;\n        for (var i = 1; i < _consts__WEBPACK_IMPORTED_MODULE_0__.BLOCK_RAWS - 2; i++) {\n            var count = 0;\n            for (var j = 1; j < _consts__WEBPACK_IMPORTED_MODULE_0__.BLOCK_COLS - 1; j++) {\n                if (this.currentStage[i][j] === BlockState.Locked) {\n                    count++;\n                }\n            }\n            if (count === _consts__WEBPACK_IMPORTED_MODULE_0__.BLOCK_COLS - 2) {\n                detectClearLine = true;\n                for (var j = 1; j < _consts__WEBPACK_IMPORTED_MODULE_0__.BLOCK_COLS - 1; j++) {\n                    this.currentStage[i][j] = BlockState.Clear;\n                }\n            }\n        }\n        return detectClearLine;\n    };\n    GameController.prototype.deleteLine = function () {\n        var detectClearLine = true;\n        var lineIndex = 0;\n        while (detectClearLine) {\n            detectClearLine = false;\n            for (var i = _consts__WEBPACK_IMPORTED_MODULE_0__.BLOCK_RAWS - 1; i > 0; i--) {\n                if (this.currentStage[i][1] === BlockState.Clear) {\n                    detectClearLine = true;\n                    lineIndex = i;\n                    break;\n                }\n            }\n            if (detectClearLine) {\n                for (var i = lineIndex; i > 0; i--) {\n                    for (var j = 1; j < _consts__WEBPACK_IMPORTED_MODULE_0__.BLOCK_COLS - 1; j++) {\n                        if (this.currentStage[i - 1][j] == BlockState.Empty || this.currentStage[i - 1][j] == BlockState.Locked) {\n                            this.currentStage[i][j] = this.currentStage[i - 1][j];\n                        }\n                    }\n                }\n            }\n        }\n    };\n    GameController.prototype.checkGameOver = function () {\n        for (var j = 1; j < _consts__WEBPACK_IMPORTED_MODULE_0__.BLOCK_COLS - 1; j++) {\n            if (this.currentStage[0][j] === BlockState.Locked) {\n                return 1;\n            }\n        }\n        return 0;\n    };\n    return GameController;\n}());\n\n\n\n//# sourceURL=webpack://my-canvas-games-sandbox/./src/games/tetris_basic/gameController.ts?");

/***/ }),

/***/ "./src/games/tetris_basic/keyHandler.ts":
/*!**********************************************!*\
  !*** ./src/games/tetris_basic/keyHandler.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   KeyDownHandler: () => (/* binding */ KeyDownHandler),\n/* harmony export */   KeyUpHandler: () => (/* binding */ KeyUpHandler)\n/* harmony export */ });\n/* harmony import */ var _gameController__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./gameController */ \"./src/games/tetris_basic/gameController.ts\");\n\nvar KeyDownHandler = function (e) {\n    var gameController = _gameController__WEBPACK_IMPORTED_MODULE_0__.GameController.getInstance();\n    if (gameController.isPlaying() && gameController.isClearBlock()) {\n        // disable key event\n        return;\n    }\n    if (gameController.isOpening() && e.code === 'Enter') {\n        gameController.GoPlayingScene();\n        return;\n    }\n    if (gameController.isGameover() && e.code === 'Enter') {\n        gameController.reset();\n        gameController.GoPlayingScene();\n        return;\n    }\n    switch (e.code) {\n        case 'ArrowLeft':\n            gameController.MoveBlockLeft();\n            break;\n        case 'ArrowRight':\n            gameController.MoveBlockRight();\n            break;\n        case 'ArrowDown':\n            gameController.MoveBlockDown();\n            break;\n        case 'ArrowUp':\n            gameController.RotateBlock();\n            break;\n        case 'Enter':\n            gameController.RotateBlock();\n            break;\n    }\n};\nvar KeyUpHandler = function () {\n};\n\n\n//# sourceURL=webpack://my-canvas-games-sandbox/./src/games/tetris_basic/keyHandler.ts?");

/***/ }),

/***/ "./src/games/tetris_basic/main.ts":
/*!****************************************!*\
  !*** ./src/games/tetris_basic/main.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _keyHandler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./keyHandler */ \"./src/games/tetris_basic/keyHandler.ts\");\n/* harmony import */ var _gameController__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./gameController */ \"./src/games/tetris_basic/gameController.ts\");\n\n\nvar gameLoop = function (timestamp) {\n    var gameController = _gameController__WEBPACK_IMPORTED_MODULE_1__.GameController.getInstance();\n    gameController.drawScene(timestamp);\n    requestAnimationFrame(gameLoop);\n};\nvar tetrisMain = function () {\n    window.addEventListener(\"keydown\", _keyHandler__WEBPACK_IMPORTED_MODULE_0__.KeyDownHandler, false);\n    window.addEventListener(\"keyup\", _keyHandler__WEBPACK_IMPORTED_MODULE_0__.KeyUpHandler, false);\n    var canvas = document.getElementById(\"myCanvas\");\n    var gameController = _gameController__WEBPACK_IMPORTED_MODULE_1__.GameController.getInstance();\n    gameController.init(canvas);\n    requestAnimationFrame(gameLoop);\n};\nwindow.addEventListener('DOMContentLoaded', tetrisMain);\n\n\n//# sourceURL=webpack://my-canvas-games-sandbox/./src/games/tetris_basic/main.ts?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/games/tetris_basic/main.ts");
/******/ 	
/******/ })()
;